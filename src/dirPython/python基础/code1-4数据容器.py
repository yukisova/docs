# 数据容器：可以容纳多个数据的数据类型 其中每个数据叫做元素，每个元素可以为任意类型

# 是否支持重复元素
# 是否可以修改
# 是否有序
# 划分五类数据容器 列表、元组、字符串（此为序列）、集合、字典

# list 列表 []作为标识
list_1 = [1,1.2,"3"]
list_2 = []
list_3 = list()
# 使用时 [-1] 从右数第1个 [1]从左数第一个 可以多维
"""
1.查找    .index(索引/元素内容)
2.插入元素    .insert(索引,元素内容)
3.追加元素    .append(元素内容)
4.追加一批元素 .extend(其他数据容器)
5.删除索引对应元素
    del 列表名[索引]
6.删除索引对应元素并返回
    .pop(索引)
6.删除匹配元素    .remove(元素内容)
7.清空列表    .clear()
8.统计某元素数量  .count(元素内容)
9.统计元素数量    .len()
1-a.切片           序列.[起始索引:结束索引:步长]（可以联系range函数）
    步长默认1，起始默认为0，结束默认为n-1，可以省略
    步长为负数代表反向取
"""

# tuple 元组 ()作为标识 一旦定义完成，不能修改（常量），但其中定义的其他数据容器可以进行修改
# 元组如果只有一个数据，要加一个单独的括号
tuple_1 = (1,1.2,"3")
tuple_2 = (3,)
tuple_2_1 = ()
tuple_3 = tuple()
"""
仅包含1,8,9,1-a三个功能
"""

# str 字符串 每个字符都是一个元素，本质上不能修改，以下方法所谓修改本质上都没有改变变量本身
str_1 = "123"
str_2 = str()
"""
s-1. 替换字符串 .replace(原子串，新子串)
    不会在老字符串上修改，而是会得到新字符串作为返回值
s-2. 分隔字符串 .split(切分字符)
    会得到列表为返回值
s-3. 字符串规整 .strip(额外去除的字符(可以用串来表示))
    去除前后空格与前后指定字符（可选）
也包含1,8,9,1-a三个方法与一个特性
"""

# 非序列：不可重复，无序
# set 集合 {}作为标识 会对重复元素进行自动去重处理 输出时顺序无法保证
set_1 = {"12","23"}
set_2 = set()
"""
a-1. 添加元素 .add(元素内容)
6-b. 随机删除元素并返回
    .pop()
a-2. 取交集 .difference(集合2)
a-3. 取交集反 .difference_update(集合2)
a-4. 取并集 .union(集合2)
    会返回一个新的集合，原集合不变
也包含6,7,9三个方法
只能使用for来遍历
"""

# dict 字典 {}作为标识，其中每个键值对之间用:区分，key最好是字符串类型，且不能重复
dict_1 = {"key1":2,"key2":3,"key3":5}
dict_2 = dict()
# 使用时[key名]找到对应值，key代替了索引
print(dict_1["key1"])
# 值可以嵌套字典
dict_3 = {
    "你好":{
        "语文":12
    }
}
# 获取嵌套字典信息：当成多维
print(dict_3["你好"]["语文"])
"""
2-a. 新增/更新元素 字典[key] = value
d-1. 获取全部的键 .keys()
    用于对字典进行遍历（实际上也不用那么麻烦，直接遍历也没啥）
也包含7,9两个方法
"""

"""
以下为数据容器通用方法
c-1. 元素个数   len(数据容器)
c-2. 最大/最小元素  max(数据容器)/min(数据容器)
    字符串比较：字符码值
c-3. 类型转换（无法转换为字典）
c-4. 排序   sorted(序列,[reverse=布尔值])
    true为降序，返回一个排好序的列表
"""

"""
数据容器推导式：以下以list为例，实际上都大差不差
以一个数据容器内的值为基础 构建另一个新的数据容器，可以自定义新容器的限制与格式

[表达式 for 临时变量 in 列表名 (if 条件)]
表达式：新容器内值的格式限制，一般以临时变量为基础
临时变量：用于在容器内进行遍历
数据容器名：已有的数据容器
条件：筛选的依据
"""
# 举例：过滤list_1中长度大于1的字符串，并将剩下的全都转格式为字符串。
list_new = [str(lis) for lis in list_1 if len(lis)>1]
# 字典：表达式分为键和值两部分
# 元组：推导式的返回值是生成器对象，还需要进行进一步的tuple格式转换才能得到内容

