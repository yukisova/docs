# 封装 成员变量和方法被封装在类中，供用户使用
"""
私有变量/方法 名字以__开头
"""

class Student:
    __money = None
    name = "abc"
    def __current(self,x,y):
        print(x,y)



# 继承：
"""
class 类名(引用父类（可以多继承）):
    ~
"""
class Student_2022(Student):
    it3 = 3
    def a(self):
        # 两个调用父类属性（方法）的方式
        self.it3 = super().name
        self.it3 = Student.name

# 当类的作用仅用于汇集一堆父类（多继承）来简化使用时，可以使用pass关键字来跳过强制设置。
# 多继承中父类有同名方法与属性，先继承的优先级高于后优先级
# 可以对父类中的方法/属性进行重写
class Studnt_2023(Student_2022,Student):
    pass

# 多态：完成某个行为时，使用不同的对象会得到不同的状态（使用不同对象里的同名函数，可以有不同结果）
# 形参声明接收父类对象——实际上子类对象也是父类的一种，传入子类对象也可以正常工作，并给出不同结果。即用父类进行定义声明，子类进行实际工作(类型注解)
# 在父类中被pass的方法，称之为抽象方法
# 作为对子类的软性约束，要求子类必须复写父类一些方法，由此实现多态

