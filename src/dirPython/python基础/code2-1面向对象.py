from typing import *
"""
class 类名:
    def __init__(self,形参……):
        构造方法体
    成员变量名 = None   # 默认为None
    def 成员方法名(self,形参)
        成员方法体
    
self：指向类自身的内容，相当于java中的this，定义方法时必须存在，调用时可以忽略
__init__:对应的方法被称为构造方法，在创建类对象时传值
"""

class Student:
    name = None # 属性一般将初值设为None

stu_1 = Student()   # 创建一个Student类对象，就可以将对应类赋给变量
stu_1.name = "周杰伦"   # 调用类中变量（对象属性）（类似其他的编程语言的对象）

# __init__是py中类的内置方法，这些内置方法又称魔术方法，，还有别的魔术方法
"""
f-1. __str__    字符串方法
    在对类进行字符串转换时， 相当于调用此方法（没有重写该方法的话会返回类对应的地址）
f-2. __lt__(self,other)     小于、大于符号比较
    在对两个同名类对象进行< >比较时会调用此方法，没有重写该方法会报错
f-3. __le__(~)     小于/大于等于符号比较
    ~
f-4. __eq__(~)     符号比较
    ~
"""

# 类型注解：帮助IDE工具对代码进行类型推断与类型限制（相当于补充一个类型声明）
#   语法：变量名 : 类型名
# 给变量加上注解，相当于为编译器强调该变量的类型（之后贸然赋值不一样类型会弹出警告）
a : int = 12
b : list[int] = [12,33,1]

""" 
给函数加上注解，相当于限制传入参数的类型（也可以限制返回值的类型）（类型不符会弹出警告），方便编译的同时还会方便代码联想
形参:限制类型名     -> 限制返回值类型名
"""
def func(x: int) -> str:
    return str(x)

# 数据容器类型注解：当需要强调一个有多种类型的数据容器里的类型时，需要使用Union，但这样的话必须先导入typing包
# 没有使用Union：限制整个数据容器只能为特定类型
# 加了Union：数据容器元素类型可以为所框选的类型之一
# Union像是元素一样在普通类型后：限制前几个只能为**类型，其后可以从Union中选
a : list[Union[int,str]]